{"/about":{"title":"About","data":{"":"QUAK Kacper Walczak company website. Check how to call or send email to me.","connect-with-me#Connect with me":"LinkedIn\nFacebook\n\n+48 515-624-369\n\n\nk.walczak@quak.com.pl","location#Location":"Poland, Pozna≈Ñ"}},"/":{"title":"QUAK","data":{"":"QUAK - quickly understand another key (where key is the answer)","products#Products":"","learn#Learn":"Click LEARN  in the navbar and start improving yourself with QUAK\n\nTopics","architecture#Architecture":"QUAK developed üèõ DRD architecture (DTO's Repository Domain) for frontend. Try out GitHub Angular repository example.\nDRD is framework agnostic architecture that can be used in any programming language.DRD split business logic from presentation layer/use case.","libraries#Libraries":"","javascripttypescript#Javascript/Typescript":"QUAK is providing libraries with framework agnostic aproach.\n\n\n\n\n\n\nVisit NPM and search for @quak.lib/ to find js libraries or click @quak.lib account to see list of all."}},"/learn":{"title":"Learn","data":{"":"Check out the topics to learn more about the different aspects of the programming.\n\nTopics","ai#AI":"","architecture#Architecture":"","drd-frontend#DRD frontend":"","backend#Backend":"","frontend#Frontend":"","angular#Angular":"","theming#Theming":"","quak-codes#QUAK Codes":"","easy-algorithms#Easy algorithms":""}},"/learn/ai":{"title":"AI","data":{"":"Learn about Artificial Intelligence and Machine Learning.\nQUAK is working on it."}},"/learn/architecture":{"title":"Architecture","data":{"":"Available architectures developed or explained by QUAK.\n\nFrontend"}},"/learn/architecture/drd-frontend":{"title":"DRD Architecture","data":{"":"QUAK developed DRD architecture (DTO's Repository Domain) for frontend.","what-is-drd#What is DRD?":"","graph#Graph":"","description#Description":"DRD Architecture is made as an elevation of DDD (Domain Driven Design) to frontend. It is based on Reactivity and DDD vision.\nDRD split business logic from presentation layer/use case. DRD is framework agnostic architecture that can be used in any programming language.DRD focus on models that have business bahavior and proper abstraction for managing data from BACKEND ‚Üí FRONTEND.DRD makes views creation simple, secure and fast.","why#Why?":"Easy to maintain - you can easily change field names in translations layer (DTO) and it will be automatically changed in all other layers, etc.\nEasy to test - you can easily test each layer because it is regulary single responsibility cases\nEasy to understand - you can easily understand what is going on in each layer\nEasy to scale - you can easily add any new views once you created proper foundation\nBeautiful models - finally you can have beautiful models with methods and not only data\nReactivity - you can easily react to any change in store, your views are always up to date and way simpler","when#When?":"When you have frontend client - DRD Architecture makes sense only if you have separate frontend client, like SPA or mobile app\nComplexity - DRD Architecture makes sense for small and enterprise projects, but not for simple projects (let HTML and JS/TS be the king in simple apps)","layers#Layers":"Take a look at each layer page to see layer explanation with code examples.","example#Example":"","folder-structure#Folder structure":"","angular#Angular":"DRD - Example Angular GitHub Repo"}},"/learn/architecture/drd-frontend/domain":{"title":"Third layer - domain layer","data":{"":"","model#Model":"Well, a model is a class that represents a business entity that we face on the frontend.Example models: user.model.ts, cart.model.ts, file-item.model.ts.\nTake a look that methods are mostly POST/PUT calls.\n\nclass Model {\ndata: number\n\nupdate(data: number, repo: ModelRepositoryInterface): Observable<Model> {\nreturn repo.updateModel(data).pipe(\ntap(response => this.data = data) // update only on succes response\n)\n}\n}","store#Store":"Store represents data in views.\nStores are reactive source of data which makes (GET) requests and reacts to actions.\n\ntype Data = { data: Model | null }\nconst DEFAULT: Data = { data: null }\n\nclass Store {\ndata$ = new BehaviorSubject<Data>(DEFAULT)\nactions = {\nfetchDataForID: new Subject<number>()\n}\n\nconstructor(repo: ModelRepositoryInterface) {\nthis.repo = repo\nthis.actions\n.fetchDataForID.subscribe(id => this._fetchFor(id))\n}\n\nprivate _fetchFor(id: number) {\nthis.repo.findOne(id)\n.subscribe(response => this.data$.next(response)) // update data\n}\n}","service#Service":"Services is useful when we need to glue up two or more models/services/etc together.\n\nQUAK is working on it."}},"/learn/architecture/drd-frontend/dto":{"title":"First layer - translations layer","data":{"":"","what-for#What for?":"DTO (Data Transfer Object) layer is used for e.g.:\ncurrently logged in user\n\nFetchUserResponse -> new UserDto(response) -> UserFactory.fromUserDto(dto)\n* factory from domain layer\n\nlist of users\n\nFetchUserListResponse -> new UserListDto(response) -> dto.users.map(user => new UserListItem(user))\n* UserListItem from domain layer\n\nREMBER don't use same model for 2 things. User isn't UserListItem.","dto#DTO":"DTO - Data Transfer Object - it is a class that is resposible for tranlsating incoming responses to our models.Example DTOs: find-users.dto.ts, user-profile.dto.ts, user.dto.ts.\nDTO/Translations layer is responsible for managing incoming data shape and encapsulating changes.\n\nclass UserDto {\nid: UserID\nusername: string\naddress: AddressDto\n\nconstructor(response: FetchUserResponse) {\nthis.id = response.id\nthis.username = response.user_name\nthis.address = AddressDto.fromFetchUserResponse(response)\n}\n\nstatic fromResponse(res: FetchUserResponse): UserDto {\nreturn new UserDto(res)\n}\n}","types#Types":"Types in translation layer are:\nresponses\ninner types, like UserID\n\n\ntype UserID = string\n\ntype FetchUserResponse = {\nid: UserID\nusername: string\naddress: AddressResponseObject\n}\n\ntype AddressResponseObject = {\nstreet: string;\ncity: string;\n}","example#Example":"Example common feature: users\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass UserDto {\nid: UserID;\nusername: string;\naddress: AddressDto;\n\nconstructor(response: FetchUserResponse) {\nthis.id = response.id;\nthis.username = response.user_name;\nthis.address = AddressDto.fromFetchUserResponse(response);\n}\n\nstatic fromResponse(res: FetchUserResponse): UserDto {\nreturn new UserDto(res);\n}\n}\n\n\n\nclass AdressDto {\nstreet: string;\ncity: string;\n\nconstructor(from: AdressDto) {\nthis.street = from.street;\nthis.city = from.city;\n}\n\nstatic fromFetchUserResponse(res: FetchUserResponse): AdressDto {\nreturn new AdressDto({\nstreet: res.address.street,\ncity: res.address.city\n});\n}\n}\n\n\n\ntype FetchUserResponse = {\nid: UserID;\nusername: string;\naddress: AddressResponseObject;\n}\n\ntype AddressResponseObject = {\nstreet: string;\ncity: string;\n}\n\n\n\ntype UserID = string;"}},"/learn/architecture/drd-frontend/repository":{"title":"Second layer - repository layer","data":{"":"","what-for#What for?":"Repo layer is used for e.g.:\nfetching list of users\n\nUserRepository.find(userSearchFilter) -> FindUsersDto\nupload file\n\nFileRepository.upload(file) -> UploadFileDto\nREMBER always return DTOs from repository ‚Üí models are created from DTOs.","repository#Repository":"Repository - is a service that handles HTTP request to our persistance layer (database, fileStorage, etc).Example Repositories: user.repository.ts, file.repository.ts, analitics.repository.ts.\nYou can omit reactivity and use Promises instead of Observable.\n\nclass UserRepository implements UserRepositoryInterface {\nconstructor(private readonly http: HttpClient) {}\n\nfind(where: FindUsersFilter): Observable<FindUsersDto> {\nreturn this.http\n.get<FindUserResponse[]>(`${environment.api}/users`, {params: where})\n.pipe(map(FindUsersDTO.fromResponse))\n}\ncreate(user: CreateUserBody): Observable<CreateUserDto> {...}\nupdate(user: UpdateUserBody): Observable<UpdateUserDto> {...}\ndelete(id: UserID): Observable<void> {...}\n}","types#Types":"Types in repository layer are:\nrepository interfaces\ninner types libe ...Body, ...Filter, ...Params, etc.\n\n\nDeclare repository interface for easy data provider swap.\n\ninterface UserRepositoryInterface {\nfind(where: FindUsersFilter): Observable<FindUsersDto>\ncreate(user: CreateUserBody): Observable<CreateUserDto>\nupdate(user: UpdateUserBody): Observable<UpdateUserDto>\ndelete(id: UserID): Observable<void> // UserID from translations layer\n}","example#Example":"Example common feature: users\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass UserRepository implements UserRepositoryInterface {\nconstructor(private http: HttpClient) {}\n\nfindOne(urlSafeID: UserID): Observable<UserDTO> {\nreturn this.http\n.get<FindUserResponse>(`/api/users/${urlSafeID}`)\n.pipe(map(UserDTO.fromResponse));\n}\n\nfind(where: Partial<FindUsersFilter>): Observable<FindUsersDTO> {\nreturn this.http\n.get<FindUserResponse[]>('/api/users', { params: where })\n.pipe(map(FindUsersDTO.fromResponse));\n}\n\nupdate(user: UpdateUserBody): Observable<UpdateUserDto> {\nreturn this.http\n.put<UpdateUserResponse>(`/api/users/${user.id}`, user)\n.pipe(map(response => new UpdateUserDto(response)));\n}\n}\n\n\n\ninterface UserRepositoryInterface {\nfindOne(urlSafeID: UserID): Observable<UserDTO>;\nfind(where: Partial<FindUsersFilter>): Observable<FindUsersDTO>;\nupdate(user: UpdateUserBody): Observable<UpdateUserDto>;\n}\n\n\n\ntype Filter = {\nreadonly id: string;\nreadonly username: string;\nreadonly role: UserRole;\nreadonly page: number;\nreadonly limit: number;\n}\n\nclass FindUsersFilter {\nreadonly id: string;\nreadonly username: string;\nreadonly role: UserRole;\nreadonly page: number;\nreadonly limit: number;\n\nconstructor(filters?: Partial<Filter>) {\nthis.id = filters?.id || '';\nthis.username = filters?.username || '';\nthis.role = filters?.role || 'guest';\nthis.page = filters?.page || 1;\nthis.limit = filters?.limit || 10;\n}\n}"}},"/learn/architecture/drd-frontend/use-case":{"title":"Use Case","data":{"":"QUAK is working on it."}},"/learn/backend":{"title":"Backend","data":{"":"QUAK is working on it."}},"/learn/frontend":{"title":"Frontend","data":{"":"Javascript & Typescript\n\n\n\n\n\n\n\nAngular"}},"/learn/frontend/angular":{"title":"Angular","data":{"":"Agular best practices and gathered knowlege.\n\nState Management"}},"/learn/frontend/angular/state-management":{"title":"Angular state management","data":{"":"QUAK is working on it.\nAt the moment just go for Qstore library."}},"/learn/frontend/theming":{"title":"Theming","data":{"":"QUAK is working on it.\nAt the moment just go for Qtheme library."}},"/learn/quak-codes":{"title":"QUAK Codes","data":{"":"Try yourself with QUAK codes. Solve coding problems, learn fastest algorithms.\n\nLevels"}},"/learn/quak-codes/easy":{"title":"QUAK Codes - Easy","data":{"":"QUAK is working on it.Finished problem pages:\nEasy / Algorithm for checking whether a number is primary or not\nEasy / Algorithm for Roman to Integer conversion"}},"/libraries/qstore":{"title":"Qstore","data":{"":"Qstore GitHub repository\nQstore NPM package\n\n~3kb.js library for state management based on RxJS. It's a simple and lightweight alternative to Redux, MobX, Vuex, etc. Use it if it fits your needs.","install#Install":"npm install @quak.lib/qstore","what-is-qstore#What is Qstore?":"It's library for state management. Builded mainly for Angular but it can be used in any other framework or even without any framework.","interfaces#Interfaces":"","create-store#Create store":"import {Store} from '@quak.lib/qstore';\n\n@Injectable({providedIn: 'root'}) // Angular way of providing global services\nclass ProductStore extends Store<{products: Product[]}> {\nproducts$ = this.select(state => state.products);\nactions = {\naddProduct: ActionWith<Product>(),\nremoveProduct: ActionWith<Product>(),\nresetProducts: Action()\n};\n\nconstructor() {\nsuper({products: []});\n\nthis.actions.addProduct.listen()\n.subscribe(product => {\nthis.set({products: [...this.values.products, product]});\n});\n\nthis.actions.removeProduct.listen()\n.subscribe(product => {\nthis.set({products: this.values.products.filter(p => p.id !== product.id)});\n});\n\nthis.actions.resetProducts.listen()\n.subscribe(() => {\nthis.set({products: []});\n});\n}\n}","use-store#Use store":"@Component({\nselector: 'app-product-list',\ntemplate: `\n<div *ngFor=\"let product of products$ | async\">\n<app-product [product]=\"product\"></app-product>\n</div>\n`\n})\nclass ProductListComponent {\nproducts$ = this.productStore.products$;\n\nconstructor(private productStore: ProductStore) {}\n}\n\n@Component({\nselector: 'app-product',\ntemplate: `\n<div>\n<h3>{{product.name}}</h3>\n<button (click)=\"removeProduct()\">Remove</button>\n</div>\n`\n})\nclass ProductComponent {\n@Input() product: Product;\n\nconstructor(private productStore: ProductStore) {}\n\nremoveProduct() {\nthis.productStore.actions.removeProduct.execute(this.product);\n}\n}\n\n@Component({\nselector: 'app-product-add',\ntemplate: `\n<div>\n<input [(ngModel)]=\"name\">\n<button (click)=\"addProduct()\">Add</button>\n</div>\n`\n})\nclass ProductAddComponent {\nname: string;\n\nconstructor(private productStore: ProductStore) {}\n\naddProduct() {\nthis.productStore.actions.addProduct.execute({name: this.name});\n}\n}\n\n@Component({\nselector: 'app-product-reset',\ntemplate: `\n<div>\n<button (click)=\"resetProducts()\">Reset</button>\n</div>\n`\n})\nclass ProductResetComponent {\nconstructor(private productStore: ProductStore) {}\n\nresetProducts() {\nthis.productStore.actions.resetProducts.execute();\n}\n}","license#License":"MIT LICENSEMade & maintained with ‚ù§Ô∏è by QUAK"}},"/libraries/qtheme":{"title":"Qtheme","data":{"":"Qtheme Website\nQtheme GitHub repository\nQtheme NPM package\n\n~5kb.js, 0 dependencies, fast, fully typed and production-ready css-in-js library for managing themes in your app. Create multiple themes and switch between them with Qtheme.setTheme(theme)","requirements#Requirements":"None, works with any framework and plain JS/TS with HTML.","install#Install":"npm install @quak.lib/qtheme\n\n\n\n\n\nCheck out website to see Qtheme in action.\n\n\n\n\n\n\n\n\n\n\nTheme selector - top-right corner","what-is-qtheme#What is Qtheme?":"import {Qtheme, Theme, CSSProps} from '@quak.lib/qtheme'\n\nconst btn: CSSProps = {\n'text-align': 'center', // simple strings for any CSS you need\nbackgroundColor: 'var(--primary)', // or use intelisense\ncolor: 'var(--primary-content)',\nfontWeight: 900\n}\nconst btnHover: CSSProps = {\nborderStyle: 'inset',\ncursor: 'pointer'\n}\n\n// Override atoms in each theme\n// Use Qtheme.setCommonAtoms(atoms) to set atoms for all themes\nconst lightTheme: Theme = {\nname: 'light',\natoms: [\n// SIMPLE ATOMS\n// generates --primary: dodgerblue\n['primary', 'dodgerblue'],\n\n// COMPOUND ATOMS\n// generates CSS class .btn + .btn:hover\n['btn', btn],\n['btn:hover', btnHover],\n\n// ATOMS WITH CSS CLASSES\n// generates --bg-color: hsl(0, 0%, 100%)\n// + .bg-color { background-color: var(--bg-color) }\n['bg-color', 'background-color:hsl(0, 0%, 100%)'],\n['text-color', 'color:black'],\n['text-primary', 'color:var(--primary)']\n]\n}\n\n// Init theme\nQtheme.setTheme(lightTheme)\n\n// Try to initialize theme from localStorage else lightTheme\nQtheme.init(lightTheme)\nOnce you initialized atoms you can use class=\"bg-color\" to set background color or class=\"text-primary\" to set text color, etc.\n<body class=\"bg-color text-color\">\n<h1 class=\"text-primary\">Hello world!</h1>\n<p>This is regular text color</p>\n<btn class=\"btn\">Action</btn>\n</body>\nChange theme with Qtheme.setTheme(theme).\nimport {Qtheme} from '@quak.lib/qtheme'\n\n// btn, btnHover from previous example\nconst darkTheme: Theme = {\nname: 'dark',\natoms: [\n['primary', 'red'],\n['btn', btn],\n['btn:hover', btnHover],\n['bg-color', 'background-color:hsl(0, 0%, 0%)'],\n['text-color', 'color:white'],\n['text-primary', 'color:var(--primary)']\n]\n}\n\nQtheme.setTheme(darkTheme)","getting-started#Getting started":"Qtheme lets you:\nCreate infinite number of themes\nSwitch between them easily\nSet common theme atoms for all themes\nInitialize already chosen theme on app start\nGenerate CSS classes for you, so you don't have to write it by yourself\n\nContinue getting started at Qtheme Docs - Getting started","documentation#Documentation":"Documentation with getting started, examples and API reference.","examples-repository#Examples repository":"Qtheme has separate GitHub repo with examples for each framework/compiler/library/vanilla JS/TS.\nWill work with vanilla JS if supports import/export.","api#API":"You will find all information about Qtheme theming API in Qtheme Docs - API","license#License":"MIT LICENSEMade & maintained with ‚ù§Ô∏è by QUAK"}}}