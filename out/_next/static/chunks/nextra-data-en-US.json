{"/about":{"title":"About","data":{"":"QUAK Kacper Walczak is a company that provides services in the field of software development. The company was founded in 2017 (in IT since 2019) by Kacper Walczak. The company's headquarters is located in Pozna≈Ñ, Poland.\n\n\n\nFeel free to contact in case of any questions.","connect-with-me#Connect with me":"‚û°Ô∏è LinkedIn\n\n\n\n\n\n‚û°Ô∏è Facebook","location#Location":"Poland, Pozna≈Ñ"}},"/":{"title":"Home","data":{"":"Company that makes things.\n\nQUAK is providing IT solutions for the WEB.\n\n\nSee Libraries\n\nPortfolio ‚Üí\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTheme faster\n\nAn easier theming\n\nQtheme is a library for theming your app + simple and intuitive usage.\n\n\n\n\n\n\n\n\n\n\n\nTo use Qtheme you need to declare the theme - create an object with Theme type and init this theme.\n\nTo set your theme you can use Qtheme.setTheme(yourTheme).\n\n\n\n\n\n\n\nEasy to integrate. Adding Qtheme is simple as adding in HTML fields like: class=\"text-primary\". You can simply iterate whole process file-by-file.\n\n\n\n\n\n\n\n\n\nFast-multiple-theme testing. You can easily create infinite number of themes. Go with your imagination and easily test ideas.\n\n\n\nAdding Qtheme to your project is simple as running one command in the terminal and creating then initializing theme object. You can create infinite number of themes and easily use them in your app.\n\nNot with my framework? No problem.\n\nQtheme works with Vanilla/Angular/React/Svelte/any. Try out example Qtheme repositories for Angular, React, Svelte, JS and TS.\n\n\nQtheme Website¬†‚Üí\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearn with QUAK\n\nCheck out structured how-to guides about programming aspects. Looking for Cloud, Frontend, Backend? Here we are!\n\n\n\n\n\nCategories\n\n6\n\n\n\nTeaches what?\n\nWEB and more\n\n\n\nHow?\n\nStep-by-step guides\n\n\n\nQUAK is free\n\nUnlimited","how-tos#How-to's":"Click LEARN  in the navbar and start learning with QUAK","categories#Categories":"","cloud-development-guides#Cloud development guides":"From the Learn\n\nLearn how to develop your project with QUAK expert advice.\n\n\n\n\n\nSun 30, 2023\n\nGCP - Compute Engine\n\n\n\n\nRunning a basic server\n\nCreate VM on Compute Engine, connect with SSH, install Apache and check if your VM is serving traffic on its external IP address.\n\n\n\n\n\n\n\nKacper Walczak\n\nFounder\n\n\n\n\n\n\nSun 29, 2023\n\nArchitecture\n\n\n\n\nDRD Architecture\n\nCheck out frontend architecture. Elevation of the DDD vision to the frontend. Easy understandable layers. Angular example repository.\n\n\n\n\n\n\n\nKacper Walczak\n\nFounder\n\n\n\n\n\n\n\n\n\n\n\n\nMeet QUAK\n\nQUAK is small IT company located in Poland. Main goal - work with professionals, provide well thought out solutions.\n\n\nüìô About\n\n\n\n\n\n\n\n\n\nKacper Walczak\n\nFounder"}},"/learn":{"title":"Learn","data":{"":"Check out the topics to learn more about the different aspects of the programming.\n\nTopics","table-of-content#Table of Content":"QUAK is working on AI path.\n\n\n\n\n\n\n\n\n\nQUAK is working on backend path."}},"/learn/ai":{"title":"AI","data":{"":"Learn about Artificial Intelligence and Machine Learning.\nQUAK is working on it."}},"/learn/architecture":{"title":"Architecture","data":{"":"Available architectures developed or explained by QUAK.","developed-by-quak#Developed by QUAK":"Frontend"}},"/learn/architecture/drd-frontend":{"title":"DRD Architecture","data":{"":"QUAK developed DRD architecture (DTO's Repository Domain) for frontend.","what-is-drd#What is DRD?":"","graph#Graph":"","description#Description":"DRD Architecture is made as an elevation of DDD (Domain Driven Design) to frontend. It is based on Reactivity and DDD vision.\nDRD split business logic from presentation layer/use case. DRD is framework agnostic architecture that can be used in any programming language.DRD focus on models that have business bahavior and proper abstraction for managing data from BACKEND ‚Üí FRONTEND.DRD makes views creation simple, secure and fast.","why#Why?":"Easy to maintain - you can easily change field names in translations layer (DTO) and it will be automatically changed in all other layers, etc.\nEasy to test - you can easily test each layer because it is regulary single responsibility cases\nEasy to understand - you can easily understand what is going on in each layer\nEasy to scale - you can easily add any new views once you created proper foundation\nBeautiful models - finally you can have beautiful models with methods and not only data\nReactivity - you can easily react to any change in store, your views are always up to date and way simpler","when#When?":"When you have frontend client - DRD Architecture makes sense only if you have separate frontend client, like SPA or mobile app\nComplexity - DRD Architecture makes sense for small and enterprise projects, but not for simple projects (let HTML and JS/TS be the king in simple apps)","layers#Layers":"Take a look at each layer page to see layer explanation with code examples.","example#Example":"","folder-structure#Folder structure":"","angular-example-repo#Angular Example Repo":"DRD - Example Angular GitHub Repo"}},"/learn/architecture/drd-frontend/domain":{"title":"Third layer - domain layer","data":{"":"","model#Model":"Well, a model is a class that represents a business entity that we face on the frontend.Example models: user.model.ts, cart.model.ts, file-item.model.ts.\nTake a look that methods are mostly POST/PUT calls.\n\nclass Model {\ndata: number\n\nupdate(data: number, repo: ModelRepositoryInterface): Observable<Model> {\nreturn repo.updateModel(data).pipe(\ntap(response => this.data = data) // update only on succes response\n)\n}\n}","store#Store":"Store represents data in views.\nStores are reactive source of data which makes (GET) requests and reacts to actions.\n\ntype Data = { data: Model | null }\nconst DEFAULT: Data = { data: null }\n\nclass Store {\ndata$ = new BehaviorSubject<Data>(DEFAULT)\nactions = {\nfetchDataForID: new Subject<number>()\n}\n\nconstructor(repo: ModelRepositoryInterface) {\nthis.repo = repo\nthis.actions\n.fetchDataForID.subscribe(id => this._fetchFor(id))\n}\n\nprivate _fetchFor(id: number) {\nthis.repo.findOne(id)\n.subscribe(response => this.data$.next(response)) // update data\n}\n}","service#Service":"Services is useful when we need to glue up two or more models/services/etc together.\n\nQUAK is working on it."}},"/learn/architecture/drd-frontend/dto":{"title":"First layer - translations layer","data":{"":"","what-for#What for?":"DTO (Data Transfer Object) layer is used for e.g.:\ncurrently logged in user\n\nFetchUserResponse -> new UserDto(response) -> UserFactory.fromUserDto(dto)\n* factory from domain layer\n\nlist of users\n\nFetchUserListResponse -> new UserListDto(response) -> dto.users.map(user => new UserListItem(user))\n* UserListItem from domain layer\n\nREMBER don't use same model for 2 things. User isn't UserListItem.","dto#DTO":"DTO - Data Transfer Object - it is a class that is resposible for tranlsating incoming responses to our models.Example DTOs: find-users.dto.ts, user-profile.dto.ts, user.dto.ts.\nDTO/Translations layer is responsible for managing incoming data shape and encapsulating changes.\n\nclass UserDto {\nid: UserID\nusername: string\naddress: AddressDto\n\nconstructor(response: FetchUserResponse) {\nthis.id = response.id\nthis.username = response.user_name\nthis.address = AddressDto.fromFetchUserResponse(response)\n}\n\nstatic fromResponse(res: FetchUserResponse): UserDto {\nreturn new UserDto(res)\n}\n}","types#Types":"Types in translation layer are:\nresponses\ninner types, like UserID\n\n\ntype UserID = string\n\ntype FetchUserResponse = {\nid: UserID\nusername: string\naddress: AddressResponseObject\n}\n\ntype AddressResponseObject = {\nstreet: string;\ncity: string;\n}","example#Example":"Example common feature: users\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass UserDto {\nid: UserID;\nusername: string;\naddress: AddressDto;\n\nconstructor(response: FetchUserResponse) {\nthis.id = response.id;\nthis.username = response.user_name;\nthis.address = AddressDto.fromFetchUserResponse(response);\n}\n\nstatic fromResponse(res: FetchUserResponse): UserDto {\nreturn new UserDto(res);\n}\n}\n\n\n\nclass AdressDto {\nstreet: string;\ncity: string;\n\nconstructor(from: AdressDto) {\nthis.street = from.street;\nthis.city = from.city;\n}\n\nstatic fromFetchUserResponse(res: FetchUserResponse): AdressDto {\nreturn new AdressDto({\nstreet: res.address.street,\ncity: res.address.city\n});\n}\n}\n\n\n\ntype FetchUserResponse = {\nid: UserID;\nusername: string;\naddress: AddressResponseObject;\n}\n\ntype AddressResponseObject = {\nstreet: string;\ncity: string;\n}\n\n\n\ntype UserID = string;"}},"/learn/architecture/drd-frontend/repository":{"title":"Second layer - repository layer","data":{"":"","what-for#What for?":"Repo layer is used for e.g.:\nfetching list of users\n\nUserRepository.find(userSearchFilter) -> FindUsersDto\nupload file\n\nFileRepository.upload(file) -> UploadFileDto\nREMBER always return DTOs from repository ‚Üí models are created from DTOs.","repository#Repository":"Repository - is a service that handles HTTP request to our persistance layer (database, fileStorage, etc).Example Repositories: user.repository.ts, file.repository.ts, analitics.repository.ts.\nYou can omit reactivity and use Promises instead of Observable.\n\nclass UserRepository implements UserRepositoryInterface {\nconstructor(private readonly http: HttpClient) {}\n\nfind(where: FindUsersFilter): Observable<FindUsersDto> {\nreturn this.http\n.get<FindUserResponse[]>(`${environment.api}/users`, {params: where})\n.pipe(map(FindUsersDTO.fromResponse))\n}\ncreate(user: CreateUserBody): Observable<CreateUserDto> {...}\nupdate(user: UpdateUserBody): Observable<UpdateUserDto> {...}\ndelete(id: UserID): Observable<void> {...}\n}","types#Types":"Types in repository layer are:\nrepository interfaces\ninner types libe ...Body, ...Filter, ...Params, etc.\n\n\nDeclare repository interface for easy data provider swap.\n\ninterface UserRepositoryInterface {\nfind(where: FindUsersFilter): Observable<FindUsersDto>\ncreate(user: CreateUserBody): Observable<CreateUserDto>\nupdate(user: UpdateUserBody): Observable<UpdateUserDto>\ndelete(id: UserID): Observable<void> // UserID from translations layer\n}","example#Example":"Example common feature: users\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass UserRepository implements UserRepositoryInterface {\nconstructor(private http: HttpClient) {}\n\nfindOne(urlSafeID: UserID): Observable<UserDTO> {\nreturn this.http\n.get<FindUserResponse>(`/api/users/${urlSafeID}`)\n.pipe(map(UserDTO.fromResponse));\n}\n\nfind(where: Partial<FindUsersFilter>): Observable<FindUsersDTO> {\nreturn this.http\n.get<FindUserResponse[]>('/api/users', { params: where })\n.pipe(map(FindUsersDTO.fromResponse));\n}\n\nupdate(user: UpdateUserBody): Observable<UpdateUserDto> {\nreturn this.http\n.put<UpdateUserResponse>(`/api/users/${user.id}`, user)\n.pipe(map(response => new UpdateUserDto(response)));\n}\n}\n\n\n\ninterface UserRepositoryInterface {\nfindOne(urlSafeID: UserID): Observable<UserDTO>;\nfind(where: Partial<FindUsersFilter>): Observable<FindUsersDTO>;\nupdate(user: UpdateUserBody): Observable<UpdateUserDto>;\n}\n\n\n\ntype Filter = {\nreadonly id: string;\nreadonly username: string;\nreadonly role: UserRole;\nreadonly page: number;\nreadonly limit: number;\n}\n\nclass FindUsersFilter {\nreadonly id: string;\nreadonly username: string;\nreadonly role: UserRole;\nreadonly page: number;\nreadonly limit: number;\n\nconstructor(filters?: Partial<Filter>) {\nthis.id = filters?.id || '';\nthis.username = filters?.username || '';\nthis.role = filters?.role || 'guest';\nthis.page = filters?.page || 1;\nthis.limit = filters?.limit || 10;\n}\n}"}},"/learn/architecture/drd-frontend/use-case":{"title":"Use Case","data":{"":"QUAK is working on it."}},"/learn/backend":{"title":"Backend","data":{"":"QUAK is working on it."}},"/learn/cloud":{"title":"Cloud","data":{"":"Cloud related topics (how-to guides).","cloud-providers#Cloud Providers":"Guides for products"}},"/learn/cloud/google-cloud-platform":{"title":"Google Cloud Platform","data":{"":"Collection of guides for Google Cloud Platform products.\n\nProducts guides"}},"/learn/cloud/google-cloud-platform/compute-engine":{"title":"Compute Engine","data":{"":"Collection of guides for Compute Engine API.\n\nGuides"}},"/learn/cloud/google-cloud-platform/compute-engine/running-a-basic-server":{"title":"Running a basic test server","data":{"":"","before-you-begin#Before you begin":"Make sure that billing is enabled for your Google Cloud project.Enable the Compute Engine API.","create-linux-vm-instance#Create Linux VM instance":"","create-a-vm-instance#Create a VM instance":"In the Google Cloud console, go to the Create an instance page.","select-operating-system#Select operating system":"In the Boot disk section, click Change to begin configuring your boot disk.On the Public images tab, choose Ubuntu from the Operating system list.Choose Ubuntu 20.04 LTS from the Version list.Click Select.","firewall#Firewall":"In the Firewall section, select Allow HTTP traffic.","create#Create":"To create the VM, click Create.\nAllow a short period of time for the instance to start. After the instance is ready, it's listed on the VM instances page with a green status icon.","connect-to-the-vm-instance#Connect to the VM instance":"","choose-vm-instance#Choose VM instance":"In the  VM instances page choose your instance.","connect-via-ssh#Connect via SSH":"In the list of virtual machine instances, click SSH in the row of the instance that you want to connect to.","install-apache#Install Apache":"","install-packages#Install packages":"To update the available packages and install the apache2 package, use the system package manager for that operating system. To update an Ubuntu VM, run the following command:\nsudo apt update && sudo apt -y install apache2","start-server#Start server":"After installing Apache, the operating system automatically starts the Apache server.","verify-that-apache-is-running#Verify that Apache is running":"To verify that Apache is running run the following command:\nsudo systemctl status apache2","prepare-for-browser-testing#Prepare for browser testing":"Overwrite the Apache web server default web page:\necho '<!doctype html><html><body><h1>QUAK Hello!</h1></body></html>' | sudo tee /var/www/html/index.html","test-your-server#Test your server":"Test that your VM is serving traffic on its external IP address.","choose-vm-instance-1#Choose VM instance":"In the Google Cloud console, go to the VM Instances page.Copy the external IP for your VM under the External IP column.","open-browser#Open browser":"In a browser, navigate to http://[EXTERNAL-IP]. Don't connect using https because this causes the server to return a Connection Refused error.","result#Result":"You should now see the page with the following text:\nQUAK Hello!"}},"/learn/frontend":{"title":"Frontend","data":{"":"Javascript & Typescript\n\n\n\n\n\n\n\nAngular"}},"/learn/frontend/angular":{"title":"Angular","data":{"":"Agular best practices and gathered knowlege.\n\nState Management"}},"/learn/frontend/angular/state-management":{"title":"Angular state management","data":{"":"QUAK is working on it.\nAt the moment just go for Qstore library."}},"/learn/frontend/theming":{"title":"Theming","data":{"":"QUAK is working on it.\nAt the moment just go for Qtheme library."}},"/learn/quak-codes":{"title":"QUAK Codes","data":{"":"Try yourself with QUAK codes. Solve coding problems, learn fastest algorithms.\n\nLevels"}},"/learn/quak-codes/easy":{"title":"QUAK Codes - Easy üå±","data":{"":"QUAK is working on it.Finished problem pages:\nEasy / Algorithm for checking whether a number is primary or not\nEasy / Algorithm for Roman to Integer conversion"}},"/libraries/qtheme":{"title":"Qtheme","data":{"":"Qtheme Website\nQtheme GitHub repository\nQtheme NPM package\n\n~5kb.js, 0 dependencies, fast, fully typed and production-ready css-in-js library for managing themes in your app. Create multiple themes and switch between them with Qtheme.setTheme(theme)","requirements#Requirements":"None, works with any framework and plain JS/TS with HTML.","install#Install":"npm install @quak.lib/qtheme\n\n\n\n\n\nCheck out website to see Qtheme in action.\n\n\n\n\n\n\n\n\n\n\nTheme selector - top-right corner","what-is-qtheme#What is Qtheme?":"import {Qtheme, Theme, CSSProps} from '@quak.lib/qtheme'\n\nconst btn: CSSProps = {\n'text-align': 'center', // simple strings for any CSS you need\nbackgroundColor: 'var(--primary)', // or use intelisense\ncolor: 'var(--primary-content)',\nfontWeight: 900\n}\nconst btnHover: CSSProps = {\nborderStyle: 'inset',\ncursor: 'pointer'\n}\n\n// Override atoms in each theme\n// Use Qtheme.setCommonAtoms(atoms) to set atoms for all themes\nconst lightTheme: Theme = {\nname: 'light',\natoms: [\n// SIMPLE ATOMS\n// generates --primary: dodgerblue\n['primary', 'dodgerblue'],\n\n// COMPOUND ATOMS\n// generates CSS class .btn + .btn:hover\n['btn', btn],\n['btn:hover', btnHover],\n\n// ATOMS WITH CSS CLASSES\n// generates --bg-color: hsl(0, 0%, 100%)\n// + .bg-color { background-color: var(--bg-color) }\n['bg-color', 'background-color:hsl(0, 0%, 100%)'],\n['text-color', 'color:black'],\n['text-primary', 'color:var(--primary)']\n]\n}\n\n// Init theme\nQtheme.setTheme(lightTheme)\n\n// Try to initialize theme from localStorage else lightTheme\nQtheme.init(lightTheme)\nOnce you initialized atoms you can use class=\"bg-color\" to set background color or class=\"text-primary\" to set text color, etc.\n<body class=\"bg-color text-color\">\n<h1 class=\"text-primary\">Hello world!</h1>\n<p>This is regular text color</p>\n<btn class=\"btn\">Action</btn>\n</body>\nChange theme with Qtheme.setTheme(theme).\nimport {Qtheme} from '@quak.lib/qtheme'\n\n// btn, btnHover from previous example\nconst darkTheme: Theme = {\nname: 'dark',\natoms: [\n['primary', 'red'],\n['btn', btn],\n['btn:hover', btnHover],\n['bg-color', 'background-color:hsl(0, 0%, 0%)'],\n['text-color', 'color:white'],\n['text-primary', 'color:var(--primary)']\n]\n}\n\nQtheme.setTheme(darkTheme)","getting-started#Getting started":"Qtheme lets you:\nCreate infinite number of themes\nSwitch between them easily\nSet common theme atoms for all themes\nInitialize already chosen theme on app start\nGenerate CSS classes for you, so you don't have to write it by yourself\n\nContinue getting started at Qtheme Docs - Getting started","documentation#Documentation":"Documentation with getting started, examples and API reference.","examples-repository#Examples repository":"Qtheme has separate GitHub repo with examples for each framework/compiler/library/vanilla JS/TS.\nWill work with vanilla JS if supports import/export.","api#API":"You will find all information about Qtheme theming API in Qtheme Docs - API","license#License":"MIT LICENSEMade & maintained with ‚ù§Ô∏è by QUAK"}},"/portfolio":{"title":"Portfolio","data":{"":"Norway, the photo taken by me, colors are maxed","projects#Projects":"Projects made for clients from scratch. Click title or icon to visit details page. Read descriptions to understand the context and look at the videos and screenshots to fully grasp the idea of the every single project.\n\n\n\n\n\n\n\n\nTechApp\n\nRTV/AGD Service ticket management and easy maps\n\n\n\n\nActive\n\n\n\n\n\n\nOnline since 2022\n\n\n\n\n\n\n\n\n\n\n\nShopApp\n\nPhotographer shop and portfolio\n\n\n\n\nStatus\n\nActive 2021-2022\n\n\n\n\n\n\n\n\n\n\nCreativoApp\n\nPlumber Managing orders and invoices\n\n\n\n\nStatus\n\nActive 2021-2022\n\n\n\n\n\n\n\n\n\n\nPsyApp\n\nPsychologist interactive psycho-test\n\n\n\n\nStatus\n\nActive 2021-2022\n\n\n\n\n\n\n\n\n\n\nWielkopolski Rajd Historyczny\n\nAutomobilklub Wielkopolski Official website for oldtimer's event\n\n\n\n\nStatus\n\nActive 2019-2021\n\n\n\n\nI'm showing only that projects which was made by QUAK only. I have a lot of projects where I work/ed, which I can't show, because of NDA.\n\n\n\n\n\nCurrently working in Solwit for one of their clients on worldwide E-Learning app. I'm working with this company for 2 years now as a full stack developer with Python and Angular + Google Cloud Platform.","quak-platform#QUAK Platform":"List of all applications that are available on the QUAK platform.\n\n\nQUAK is migrating main functionalities to the new platform, so apps and games in fullscreen on phones are not available yet ;( (some time is needed, probably few months more)\n\n\n\n\n\n\n\n\n\nQchat\n\nChat app, even had it's own domain qchat.pl\n\n\n\n\nStatus\n\n\n\n\n\n\nUnder merging into one app\n\n\n\n\n\n\n\n\n\n\n\nQwallet\n\nManage your money assets\n\n\n\n\nStatus\n\n\n\n\n\n\nUnder merging into one app\n\n\n\n\n\n\n\n\n\n\n\nQgames\n\nFree games search\n\n\n\n\nStatus\n\n\n\n\n\n\nUnder merging into one app\n\n\n\n\n\n\n\n\n\n\n\nQcrypto\n\nCrypto charts, data from Coingecko\n\n\n\n\nStatus\n\n\n\n\n\n\nUnder merging into one app","games#Games":"All games are available for üñ•Ô∏è Desktop and üì± Mobile devices.\n\n\n\n\n\n\n\n\n\n\n\n\n\nQUAKKY\n\n2D, tapper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nADVENTURER\n\n\n2D, slash, shoot, dash\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSNAKE\n\n\n2D, nostalgic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nASTEROIDS\n\n\n2D, shoot, shoot, shoot\n\n\n\n\n\n\n\n\n\nMade with ‚ù§Ô∏è and technologies (+ many more)"}},"/portfolio/games":{"title":"Games","data":{"":""}},"/portfolio/games/adventurer":{"title":"Adventurer","data":{"":"QUAK is working on it."}},"/portfolio/games/quakky":{"title":"Quakky","data":{"":"QUAK is working on it."}},"/portfolio/games/retro-games":{"title":"Snake","data":{"":"QUAK is working on it.\n\nAsteroids\nSnake"}},"/portfolio/projects":{"title":"Projects","data":{"":""}},"/portfolio/projects/creativo-app":{"title":"CreativoApp","data":{"":"QUAK is working on it."}},"/portfolio/projects/psy-app":{"title":"PsyApp","data":{"":"QUAK is working on it."}},"/portfolio/projects/shop-app":{"title":"ShopApp","data":{"":"QUAK is working on it."}},"/portfolio/projects/tech-app":{"title":"TechApp","data":{"":"","description#Description":"TechApp is an app for managing tickets and generating documents after a repair (customers approve that job was done by sign in app). Mainly it is used by technicians in the field. TechApp allows to open navigation straight to the customer's address.","desktop-and-mobile#Desktop and mobile":"Data is inserted with the same app but in office (installable desktop version as well).It is a PWA application (can be installed on any Desktop and any iOS/Android).","technologies#Technologies":"Frontend is built with Angular. The backend is built with Node and Nest.js framework.","languages#Languages":"Language: only Polish.","screenshots-and-videos#Screenshots and videos":"Mobile usage\n\n\n\nDesktop usage\n\n\n\n\n\n\n\n\nActive\n\n\n\n\n\n\nOnline since 2022","whats-next#What's next?":"Contact with me to get access to the demo version - if your company is interested in using something similar to it."}},"/portfolio/projects/wrh":{"title":"Wielkopolski Rajd Historyczny","data":{"":"QUAK is working on it."}},"/portfolio/quak-platform":{"title":"Quak Platform","data":{"":""}},"/portfolio/quak-platform/qchat":{"title":"Qchat","data":{"":"QUAK is working on it."}},"/portfolio/quak-platform/qgames":{"title":"Qgames","data":{"":"QUAK is working on it."}},"/portfolio/quak-platform/qcrypto":{"title":"Qcrypto","data":{"":"QUAK is working on it."}},"/portfolio/quak-platform/qwallet":{"title":"Qwallet","data":{"":"QUAK is working on it."}},"/libraries/qstore":{"title":"Qstore","data":{"":"JS library for state management based on RxJS. It's a simple and lightweight alternative to Redux, MobX, Vuex, etc. Use it if it fits your needs.","install#Install":"I closed NPM package - it's so small that you should just copy-paste it to your project.\n\n\n# Closed NPM package","for-rxjs-version#For RxJS Version":"import {BehaviorSubject, Subject, Observable} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n\n// Store\nexport abstract class Store<T> {\nprivate state$: BehaviorSubject<T>;\n\nprotected constructor(initialState: T) {\nthis.state$ = new BehaviorSubject(initialState);\n}\n\nselect<K>(mapFn: (state: T) => K): Observable<K> {\nreturn this.state$.asObservable().pipe(\nmap((state: T) => mapFn(state)),\ndistinctUntilChanged()\n);\n}\n\nset(state: Partial<T>): void {\nthis.state$.next({...this.values, ...state});\n}\n\nget values(): T {\nreturn this.state$.getValue();\n}\n}\n\n// Actions\nexport interface StoreEvent {\nexecute: () => void;\nlisten: () => Observable<void>;\n}\n\nexport interface StoreEventWithPayload<P> {\nexecute: (payload: P) => void;\nlisten: () => Observable<P>;\n}\n\nexport const Action = (): StoreEvent => {\nconst action$ = new Subject<void>();\nreturn {\nlisten: (): Observable<void> => action$,\nexecute: () => action$.next()\n}\n};\n\nexport const ActionWith = <Payload>(): StoreEventWithPayload<Payload> => {\nconst payload$ = new Subject<Payload>();\nreturn {\nlisten: (): Observable<Payload> => payload$,\nexecute: (payload: Payload) => payload$.next(payload)\n}\n};","license#License":"To the code in this page below license applies.\nMIT License\n\nCopyright (c) 2023 QUAK Kacper Walczak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nMade & maintained with ‚ù§Ô∏è by QUAK"}}}