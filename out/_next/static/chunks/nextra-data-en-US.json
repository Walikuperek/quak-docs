{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/":{"title":"QUAK","data":{"":"QUAK - quickly understand another key (where key is the answer)","programming-dont-have-to-be-hard#Programming don't have to be hard":"Click LEARN  in the navbar and start improving yourself","quak-libraries#QUAK Libraries":"QUAK is providing libraries with framework agnostic aproach.\nVisit NPM and search for @quak.lib/ to find js libraries or click @quak.lib account to see list of all."}},"/learn/ai":{"title":"AI","data":{"":"Learn about Artificial Intelligence and Machine Learning."}},"/learn/backend":{"title":"Backend","data":{"":""}},"/learn/frontend":{"title":"Frontend","data":{"":""}},"/learn/philosophy":{"title":"Philosophy","data":{"":""}},"/learn/frontend/angular/state-management":{"title":"Angular state management","data":{"":""}},"/libraries/qstore":{"title":"Qstore","data":{"":"Qstore GitHub repository\nQstore NPM package\n\n~3kb.js library for state management based on RxJS. It's a simple and lightweight alternative to Redux, MobX, Vuex, etc. Use it if it fits your needs.","install#Install":"npm install @quak.lib/qstore","what-is-qstore#What is Qstore?":"It's library for state management. Builded mainly for Angular but it can be used in any other framework or even without any framework.","interfaces#Interfaces":"","create-store#Create store":"import {Store} from '@quak.lib/qstore';\n\n@Injectable({providedIn: 'root'}) // Angular way of providing global services\nclass ProductStore extends Store<{products: Product[]}> {\nproducts$ = this.select(state => state.products);\nactions = {\naddProduct: ActionWith<Product>(),\nremoveProduct: ActionWith<Product>(),\nresetProducts: Action()\n};\n\nconstructor() {\nsuper({products: []});\n\nthis.actions.addProduct.listen()\n.subscribe(product => {\nthis.set({products: [...this.values.products, product]});\n});\n\nthis.actions.removeProduct.listen()\n.subscribe(product => {\nthis.set({products: this.values.products.filter(p => p.id !== product.id)});\n});\n\nthis.actions.resetProducts.listen()\n.subscribe(() => {\nthis.set({products: []});\n});\n}\n}","use-store#Use store":"@Component({\nselector: 'app-product-list',\ntemplate: `\n<div *ngFor=\"let product of products$ | async\">\n<app-product [product]=\"product\"></app-product>\n</div>\n`\n})\nclass ProductListComponent {\nproducts$ = this.productStore.products$;\n\nconstructor(private productStore: ProductStore) {}\n}\n\n@Component({\nselector: 'app-product',\ntemplate: `\n<div>\n<h3>{{product.name}}</h3>\n<button (click)=\"removeProduct()\">Remove</button>\n</div>\n`\n})\nclass ProductComponent {\n@Input() product: Product;\n\nconstructor(private productStore: ProductStore) {}\n\nremoveProduct() {\nthis.productStore.actions.removeProduct.execute(this.product);\n}\n}\n\n@Component({\nselector: 'app-product-add',\ntemplate: `\n<div>\n<input [(ngModel)]=\"name\">\n<button (click)=\"addProduct()\">Add</button>\n</div>\n`\n})\nclass ProductAddComponent {\nname: string;\n\nconstructor(private productStore: ProductStore) {}\n\naddProduct() {\nthis.productStore.actions.addProduct.execute({name: this.name});\n}\n}\n\n@Component({\nselector: 'app-product-reset',\ntemplate: `\n<div>\n<button (click)=\"resetProducts()\">Reset</button>\n</div>\n`\n})\nclass ProductResetComponent {\nconstructor(private productStore: ProductStore) {}\n\nresetProducts() {\nthis.productStore.actions.resetProducts.execute();\n}\n}","license#License":"MIT LICENSEMade & maintained with ❤️ by QUAK"}},"/libraries/qtheme":{"title":"Qtheme","data":{"":"Qtheme Website\nQtheme GitHub repository\nQtheme NPM package\n\n~5kb.js, 0 dependencies, fast, fully typed and production-ready css-in-js library for managing themes in your app. Create multiple themes and switch between them with Qtheme.setTheme(theme)","requirements#Requirements":"None, works with any framework and plain JS/TS with HTML.","install#Install":"npm install @quak.lib/qtheme\n\n\n\n\n\nCheck out website to see Qtheme in action.\n\n\n\n\n\n\n\n\n\n\nTheme selector - top-right corner","what-is-qtheme#What is Qtheme?":"import {Qtheme, Theme, CSSProps} from '@quak.lib/qtheme'\n\nconst btn: CSSProps = {\n'text-align': 'center', // simple strings for any CSS you need\nbackgroundColor: 'var(--primary)', // or use intelisense\ncolor: 'var(--primary-content)',\nfontWeight: 900\n}\nconst btnHover: CSSProps = {\nborderStyle: 'inset',\ncursor: 'pointer'\n}\n\n// Override atoms in each theme\n// Use Qtheme.setCommonAtoms(atoms) to set atoms for all themes\nconst lightTheme: Theme = {\nname: 'light',\natoms: [\n// SIMPLE ATOMS\n// generates --primary: dodgerblue\n['primary', 'dodgerblue'],\n\n// COMPOUND ATOMS\n// generates CSS class .btn + .btn:hover\n['btn', btn],\n['btn:hover', btnHover],\n\n// ATOMS WITH CSS CLASSES\n// generates --bg-color: hsl(0, 0%, 100%)\n// + .bg-color { background-color: var(--bg-color) }\n['bg-color', 'background-color:hsl(0, 0%, 100%)'],\n['text-color', 'color:black'],\n['text-primary', 'color:var(--primary)']\n]\n}\n\n// Init theme\nQtheme.setTheme(lightTheme)\n\n// Try to initialize theme from localStorage else lightTheme\nQtheme.init(lightTheme)\nOnce you initialized atoms you can use class=\"bg-color\" to set background color or class=\"text-primary\" to set text color, etc.\n<body class=\"bg-color text-color\">\n<h1 class=\"text-primary\">Hello world!</h1>\n<p>This is regular text color</p>\n<btn class=\"btn\">Action</btn>\n</body>\nChange theme with Qtheme.setTheme(theme).\nimport {Qtheme} from '@quak.lib/qtheme'\n\n// btn, btnHover from previous example\nconst darkTheme: Theme = {\nname: 'dark',\natoms: [\n['primary', 'red'],\n['btn', btn],\n['btn:hover', btnHover],\n['bg-color', 'background-color:hsl(0, 0%, 0%)'],\n['text-color', 'color:white'],\n['text-primary', 'color:var(--primary)']\n]\n}\n\nQtheme.setTheme(darkTheme)","getting-started#Getting started":"Qtheme lets you:\nCreate infinite number of themes\nSwitch between them easily\nSet common theme atoms for all themes\nInitialize already chosen theme on app start\nGenerate CSS classes for you, so you don't have to write it by yourself\n\nContinue getting started at Qtheme Docs - Getting started","documentation#Documentation":"Documentation with getting started, examples and API reference.","examples-repository#Examples repository":"Qtheme has separate GitHub repo with examples for each framework/compiler/library/vanilla JS/TS.\nWill work with vanilla JS if supports import/export.","api#API":"You will find all information about Qtheme theming API in Qtheme Docs - API","license#License":"MIT LICENSEMade & maintained with ❤️ by QUAK"}}}