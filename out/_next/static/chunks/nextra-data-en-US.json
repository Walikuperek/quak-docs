{"/contact":{"title":"Contact","data":{"":"Contact\nQUAK Kacper Walczak is a company that provides services in the field of software development. Founded in 2017 (in IT since 2019) by Kacper Walczak. Headquarter is located in Poznań, Poland.\nFeel free to contact in case of any questions.","contact-with-me#Contact with me":"➡️ LinkedIn\n➡️ Facebook\nk.walczak@quak.com.pl\nLocation\nPoland, Poznań"}},"/":{"title":"Index","data":{"":"LEARN\nLearn with \nCATEGORIES\nMain categories\nLIBRARIES\nLibraries builded by \nBun-http\nVery fast HTTP server for Bun. 0 dependencies.\nSee blog post\nGitHub repo →\nimport { http, Res } from \"path/to/lib/http\"; // http from bun-http repo\nhttp.get(\"/\", (req) => {\n  return new Res(`Hello from home`);\n});\nhttp.get(\"/product/:productId\", (req) => {\n  return new Res(`Product id: ${req.params.productId}`);\n});\nhttp.post(\"/blog/create\", (req) => {\n  return new Res(`${req.params}, ${req.query}, ${req.body}`);\n});\nconst server = http.serve({ port: 3000 });\nconsole.log(`Listening on port ${server.port}...`);\n/* Example output\n$ bun main.ts\n    [0.90ms] \".env\"\n    Listening on port 3000...\n    8:27:48 PM: 200 GET /\n    8:27:52 PM: 405 GET /blog/123\n    8:27:56 PM: 200 POST /blog/123\n    8:27:58 PM: 200 GET /__endpoints // [DEV] view with list of all endpoints\n*/\nQtheme\nLight/dark/any your app/website. Works with any framework/vanilla.\nSee website\nNPM package →\nimport { Qtheme } from '@quak.lib/qtheme'\nimport { darkTheme } from 'path/to/your/themes'\nQtheme.setTheme(darkTheme)\n<body className=\"bg-color text-color\">\n  <h1 className=\"text-primary\">Hello world!</h1>\n  <p>This is regular text color</p>\n  <button className=\"btn\">Action</button>\n</body>\nQstore\nStore for any SPA app. Depends on RxJS.Use it as your reactive source of data.\nSee docs page\nGitHub repo →\nclass CounterStore extends Store<{count: number}> {\n  count$ = this.select(state => state.count)\n  constructor() { super({count: 0}) }\n  add(value: number) {\n    this.set({count: this.values.count + value})\n  }\n}\n@Component({\n  selector: 'app-counter',\n  template: `\n    <div>\n      <span>Count: {{counterStore.count$ | async}}</span>\n      <button (click)=\"counterStore.add(1)\">Increment</button>\n      <button (click)=\"counterStore.add(5)\">Add 5</button>\n    </div>\n  `\n})\nclass CounterComponent implements OnInit {\n  constructor(public counterStore: CounterStore) {}\n}\nHISTORY\n History"}},"/issue-contact":{"title":"Issue contact information","data":{"":"Please report any issues or questions to the GitHub issue tracker.Or contact with QUAK directly via email k.walczak@quak.com.pl."}},"/learn":{"title":"Learn /","data":{"":"CATEGORIES\nMain categories\nTAGS\nAll available tags\nTag purpose is to show what is the topic of given\narticle. Click one to see all articles with this tag.\nREAD\nAll readings\nYou can jump right in and read all articles."}},"/learn/angular":{"title":"#Angular","data":{"":"LEARN\nWhat is Angular\nAngular is a TypeScript-based open-source web application framework led by\nthe Angular Team at Google and by a community of individuals and corporations.\nAngular is a complete rewrite from the same team that built AngularJS.\nREAD\nAll Angular readings\nRead all Angular related articles"}},"/learn/angular/state-management":{"title":"State management","data":{"":"Store\n  · usersList\n  · selectedUserID\nKacper Walczak · 10-08-2023\nState management\nLearn how to manage state in Angular.","how-to-manage-data-in-angular#How to manage data in Angular?":"","what-is-state-management#What is state management?":"State management is a way to manage data in your application. It's a way to store data in one place and share it between components.It's a way to keep your data in understandable manor and to be easy to access and modify.","data-in-components#Data in components":"It is most often used to manage data in a single component.It is a good solution where the data is not shared between components.\n@Component({\n  selector: 'app-users-list',\n  templateUrl: './users-list.component.html',\n  styleUrls: ['./users-list.component.scss']\n})\nexport class UsersListComponent implements OnInit {\n  usersList: User[] = [];\n  constructor(private usersService: UsersService) {}\n  ngOnInit(): void {\n    this.usersService.getUsers().subscribe((users) => {\n      this.usersList = users;\n    });\n  }\n}\nOr declarative way:\n@Component({\n  selector: 'app-users-list',\n  styleUrls: ['./users-list.component.scss'],\n  template: `\n    <ul>\n      <li *ngFor=\"let user of usersList$ | async\">\n        {{ user.name }}\n      </li>\n    </ul>\n  `\n})\nexport class UsersListComponent {\n  usersList$: Observable<User[]>;\n  constructor(private usersService: UsersService) {\n    this.usersList$ = this.usersService.getUsers();\n  }\n}","data-in-services#Data in services":"Store data in service when you need to share it between components. It will be very readable and easy to use.It is a good solution where the data is shared between components.\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  usersList$: Observable<User[]>;\n  selectedUserID$: Observable<number | null>;\n  constructor(private http: HttpClient) {\n      this.usersList$ = this.http.get<User[]>('https://jsonplaceholder.typicode.com/users');\n      this.selectedUserID$ = new BehaviorSubject<number | null>(null);\n  }\n  selectUser(id: number): void {\n      this.selectedUserID$.next(id);\n  }\n}\nIt can be used in components like this:\n@Component({\n  selector: 'app-users-list',\n  styleUrls: ['./users-list.component.scss'],\n  template: `\n    <ul>\n      <li *ngFor=\"let user of usersService.usersList$ | async\">\n        <button (click)=\"usersService.selectUser(user.id)\">{{ user.name }}</button>\n      </li>\n    </ul>\n    <p *ngIf=\"usersService.selectedUserID$ | async as selectedUserID\">\n      Selected user ID: {{ selectedUserID }}\n    </p>\n  `\n})\nexport class UsersListComponent {\n  constructor(public usersService: UsersService) {}\n}","data-in-store#Data in store":"Store data in store when you need to share it between components. Just focus on the data, not on the implementation. And encapsulate the implementation in the store.It is a good solution where the data is shared and listened between multiple components.\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersStore {\n  private usersListSubject = new BehaviorSubject<User[]>([]);\n  private selectedUserIDSubject = new BehaviorSubject<number | null>(null);\n  usersList$: Observable<User[]> = this.usersListSubject.asObservable();\n  selectedUserID$: Observable<number | null> = this.selectedUserIDSubject.asObservable();\n  constructor(private http: HttpClient) {\n    this.http.get<User[]>('https://jsonplaceholder.typicode.com/users').subscribe((users) => {\n      this.usersListSubject.next(users);\n    });\n  }\n  selectUser(id: number): void {\n    this.selectedUserIDSubject.next(id);\n  }\n}\nOr maybe add Actions to the store, you can listen to them and react to them in any place of your application:\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersStore {\n  private usersListSubject = new BehaviorSubject<User[]>([]);\n  private selectedUserIDSubject = new BehaviorSubject<number | null>(null);\n  private actions$ = new Subject<Action>();\n  usersList$: Observable<User[]> = this.usersListSubject.asObservable();\n  selectedUserID$: Observable<number | null> = this.selectedUserIDSubject.asObservable();\n  constructor() {\n      this.listen('SELECT_USER').pipe(\n          tap(action => this.selectedUserIDSubject.next(action.payload.id))\n      ).subscribe();\n  }\n  dispatch(action: Action): void {\n    this.actions$.next(action);\n  }\n  listen(actionType: string): Observable<Action> {\n    return this.actions$.pipe(ofType(actionType));\n  }\n}\nfunction ofType(type: string) {\n  return function<Action>(source: Observable<Action>) {\n    return source.pipe(filter(action => action.type === type));\n  }\n}\nclass Action {\n  constructor(public type: string, public payload?: any) {}\n}\nIt can be used in components like this:\n@Component({\n  selector: 'app-users-list',\n  styleUrls: ['./users-list.component.scss'],\n  template: `\n    <ul>\n      <li *ngFor=\"let user of usersStore.usersList$ | async\">\n        <button (click)=\"usersStore.dispatch({ type: 'SELECT_USER', payload: { id: user.id } })\">\n          {{ user.name }}\n        </button>\n      </li>\n    </ul>\n    <p *ngIf=\"usersStore.selectedUserID$ | async as selectedUserID\">\n      Selected user ID: {{ selectedUserID }}\n    </p>\n  `\n})\nexport class UsersListComponent {\n  constructor(public usersStore: UsersStore) {}\n}","use-library#Use library":"You can use library to manage your state. There are many libraries to choose from.\nNgRx\nRedux\nNGXS\nQStore","qstore#Qstore":"","install#Install":"Navigate to Qstore library for more info about installation.","use#Use":"class UsersStore extends Store<{users: User[], selectedUserID: number}> {\n    usersList$ = this.select(state => state.users);\n    selectedUserID$ = this.select(state => state.selectedUserID);\n    constructor() {\n        super({\n            users: [],\n            selectedUserID: null\n        });\n    }\n    selectUser(id: number): void {\n        this.set({ selectedUserID: id });\n    }\n}\nOr use actions:\nclass UsersStore extends Store<{users: User[], selectedUserID: number}> {\n    usersList$ = this.select(state => state.users);\n    selectedUserID$ = this.select(state => state.selectedUserID);\n    actions = {\n        selectUser: ActionWith<number>(),\n        fetchUsers: Action()\n    }\n    constructor() {\n        super({\n            users: [],\n            selectedUserID: null\n        });\n        this.actions.fetchUsers.listen().subscribe(async () => {\n            this.set({ users: await this.http.get<User[]>('https://jsonplaceholder.typicode.com/users') });\n        });\n        this.actions.selectUser.listen().subscribe((id) => {\n            this.set({ selectedUserID: id });\n        });\n    }\n}\nAnd use store in components:\n@Component({\n  selector: 'app-users-list',\n  styleUrls: ['./users-list.component.scss'],\n  template: `\n    <ul>\n      <li *ngFor=\"let user of usersStore.usersList$ | async\">\n        <button (click)=\"usersStore.actions.selectUser.execute(user.id)\">\n          {{ user.name }}\n        </button>\n      </li>\n    </ul>\n    <p *ngIf=\"usersStore.selectedUserID$ | async as selectedUserID\">\n      Selected user ID: {{ selectedUserID }}\n    </p>\n  `\n})\nexport class UsersListComponent {\n  constructor(public usersStore: UsersStore) {\n      this.usersStore.actions.fetchUsers.execute();\n  }\n}\nThat's it! Now you can use this examples to manage your state in Angular."}},"/learn/architecture":{"title":"#Architecture","data":{"":"LEARN\nWhat is Architecture\nArchitecture in programming is the high level structure of a software system,\nthe discipline of creating such structures, and the documentation of these structures.\nIt is the set of structures needed to reason about the software system,\nwhich comprise the software elements, the relations between them\nand the properties of both elements and relations.\nREAD\nAll Architecture readings\nRead all Architecture related articles"}},"/learn/architecture/drd-frontend":{"title":"DRD Architecture","data":{"":"QUAK developed DRD architecture (DTO's Repository Domain) for frontend.","what-is-drd#What is DRD?":"Example of DRD Architecture for users feature:DRD - Example Angular GitHub Repo","graph#Graph":"","description#Description":"DRD Architecture is made as an elevation of DDD (Domain Driven Design) to frontend. It is based on Reactivity and DDD vision.\nDRD split business logic from presentation layer/use case. DRD is framework agnostic architecture that can be used in any programming language.DRD focus on models that have business bahavior and proper abstraction for managing data from BACKEND → FRONTEND.DRD makes views creation simple, secure and fast.","why#Why?":"Easy to maintain - you can easily change field names in translations layer (DTO) and it will be automatically changed in all other layers, etc.\nEasy to test - you can easily test each layer because it is regulary single responsibility cases\nEasy to understand - you can easily understand what is going on in each layer\nEasy to scale - you can easily add any new views once you created proper foundation\nBeautiful models - finally you can have beautiful models with methods and not only data\nReactivity - you can easily react to any change in store, your views are always up to date and way simpler","when#When?":"When you have frontend client - DRD Architecture makes sense only if you have separate frontend client, like SPA or mobile app\nComplexity - DRD Architecture makes sense for small and enterprise projects, but not for simple projects (let HTML and JS/TS be the king in simple apps)","layers#Layers":"Take a look at each layer page to see layer explanation with code examples.","example-folder-structure#Example Folder structure":"","example#Example":"Example common feature: users\ntype Address = { street: string; city: string; };\nclass FetchUserDto {\n  id: UserID;\n  username: string;\n  address: Address;\n  constructor(response: FetchUserDto) {\n    this.id = response.id;\n    this.username = response.user_name;\n    this.address = response.adress;\n  }\n}\nclass User {\n  id: UserID;\n  username: string;\n  address: Address;\n  constructor(user: User) {\n    this.id = user.id;\n    this.username = user.username;\n    this.address = user.address;\n  }\n  get fullAddress() {\n    return `${this.address.street} ${this.address.city}`;\n  }\n}\nclass UserRepo implements UserRepository {\n  async fetchUser(id: UserID): Promise<User> {\n    const response = await fetch(`/api/users/${id}`);\n    return new FetchUserDto(response);\n  }\n}\nclass UserCreationService {\n  constructor(\n      private settings: Settings,\n      private userRepo: UserRepository,\n  ) {}\n  async createUser(username: string, address: Address): Promise<boolean> {\n    if (username.length < this.settings.minUsernameLength) {\n      throw new Error('Username is too short');\n    }\n    const response = await fetch(`/api/users`, {\n      method: 'POST',\n      body: JSON.stringify({ username, address }),\n    });\n    return response.ok;\n  }\n}"}},"/learn/backend":{"title":"Learn / Backend","data":{"":"TAGS\nAll backend tags\nREAD\nReadings\nRead all Backend related articles"}},"/learn/express-js":{"title":"#ExpressJS","data":{"":"LEARN\nWhat is ExpressJS\nExpressJS is a web application framework for Node.js. It is designed for building web apps\nand APIs. It has been called the de facto standard server framework for Node.js.\nREAD\nAll ExpressJS readings\nRead all ExpressJS related articles"}},"/learn/cloud":{"title":"Learn / Cloud","data":{"":"TAGS\nAll Cloud tags\nREAD\nReadings\nRead all Cloud related articles"}},"/learn/frontend":{"title":"Learn / Frontend","data":{"":"TAGS\nAll frontend tags\nREAD\nReadings\nRead all Frontend related articles"}},"/learn/google-cloud-platform":{"title":"#Google Cloud Platform","data":{"":"LEARN\nWhat is GCP\nGoogle Cloud Platform is a suite of a cloud computing services for your business\nthat runs on the same infrastructure that Google uses internally for its end-user products,\nsuch as Google Search, Gmail, file storage, and YouTube.\nREAD\nAll GCP readings\nRead all GCP related articles"}},"/learn/google-cloud-platform/running-a-basic-server":{"title":"Running a basic test server","data":{"before-you-begin#Before you begin":"Make sure that billing is enabled for your Google Cloud project.Enable the Compute Engine API.","create-linux-vm-instance#Create Linux VM instance":"","create-a-vm-instance#Create a VM instance":"In the Google Cloud console, go to the Create an instance page.","select-operating-system#Select operating system":"In the Boot disk section, click Change to begin configuring your boot disk.On the Public images tab, choose Ubuntu from the Operating system list.Choose Ubuntu 20.04 LTS from the Version list.Click Select.","firewall#Firewall":"In the Firewall section, select Allow HTTP traffic.","create#Create":"To create the VM, click Create.\nAllow a short period of time for the instance to start. After the instance is ready, it's listed on the VM instances page with a green status icon.","connect-to-the-vm-instance#Connect to the VM instance":"","choose-vm-instance#Choose VM instance":"In the  VM instances page choose your instance.","connect-via-ssh#Connect via SSH":"In the list of virtual machine instances, click SSH in the row of the instance that you want to connect to.","install-apache#Install Apache":"","install-packages#Install packages":"To update the available packages and install the apache2 package, use the system package manager for that operating system. To update an Ubuntu VM, run the following command:\nsudo apt update && sudo apt -y install apache2","start-server#Start server":"After installing Apache, the operating system automatically starts the Apache server.","verify-that-apache-is-running#Verify that Apache is running":"To verify that Apache is running run the following command:\nsudo systemctl status apache2","prepare-for-browser-testing#Prepare for browser testing":"Overwrite the Apache web server default web page:\necho '<!doctype html><html><body><h1>QUAK Hello!</h1></body></html>' | sudo tee /var/www/html/index.html","test-your-server#Test your server":"Test that your VM is serving traffic on its external IP address.","choose-vm-instance-1#Choose VM instance":"In the Google Cloud console, go to the VM Instances page.Copy the external IP for your VM under the External IP column.","open-browser#Open browser":"In a browser, navigate to http://[EXTERNAL-IP]. Don't connect using https because this causes the server to return a Connection Refused error.","result#Result":"You should now see the page with the following text:\nQUAK Hello!"}},"/learn/javascript":{"title":"#Javascript","data":{"":"LEARN\nWhat is Javascript\nJavascript is a programming language that is mainly used to make web pages interactive.\nIt runs on your visitor's computer and doesn't require constant downloads from your website.\nJavascript is often used to create polls and quizzes or any interactive element on a website.\nREAD\nAll Javascript readings\nRead all Javascript related articles"}},"/learn/javascript/light-dark":{"title":"Light / Dark","data":{"how-to-lightdark#How to light/dark":"","only-css#Only CSS":"To change theme only with CSS you can use prefers-color-scheme media query.\n@media (prefers-color-scheme: dark) {\n    body {\n        background: black;\n        color: white;\n    }\n}\nTo set only dark theme for your website you can use color-scheme attribute on root element.\nMozilla color-scheme docs: MDN docs\n:root {\n    color-scheme: dark; /* or light */\n}\nTo set system theme you can use color-scheme attribute on root element.It will apply dark when your system has dark theme and light when your system has light theme.\n:root {\n    color-scheme: light dark;\n}","css-variables#CSS variables":"You can also use CSS variables to change theme dynamically.\nbody {\n    background: var(--bg-color);\n    color: var(--text-color);\n}\nbody.dark {\n    --bg-color: black;\n    --text-color: white;\n}\nbody.light {\n    --bg-color: white;\n    --text-color: black;\n}\nAnd then you will need to change class on body element.\ndocument.body.classList.add('dark');\ndocument.body.classList.remove('light');","use-library#Use library":"Check out Qtheme library. Qtheme is a library that allows you to create themes and change them dynamically.","qtheme#Qtheme":"Init theme at the beginning of your app.\nimport {Qtheme} from '@quak.lib/qtheme';\nQtheme.setTheme({\n    name: 'dark',\n    atoms: [\n        ['bg-color', 'background:black'],\n        ['text-color', 'color:white']\n    ]\n})\nUse in HTML:\n<body class=\"bg-color text-color\">\n    <p>Regular text</p>\n</body>\nChange to light theme:\nQtheme.setTheme({\n    name: 'light',\n    atoms: [\n        ['bg-color', 'background:white'],\n        ['text-color', 'color:black']\n    ]\n})\nThat's all. You can theme your apps and websites with any approach you want."}},"/learn/nest-js":{"title":"#NestJS","data":{"":"LEARN\nWhat is NestJS\nNestJS is a framework for building efficient, scalable Node.js web applications.\nIt is heavily inspired by Angular framework architecture. Nest Is modular, testable and uses TypeScript.\nNestJS is a great choice for building enterprise level applications.\nREAD\nAll NestJS readings\nRead all NestJS related articles"}},"/learn/next-js":{"title":"#Next.js","data":{"":"LEARN\nWhat is Next.js\nNext.js is a React framework for building server-side rendered and statically generated websites and applications.\nIt is a popular choice for building websites and applications because it is easy to get started with,\nhas a great developer experience, and is used by many companies.\nREAD\nAll Next.js readings\nRead all Next.js related articles"}},"/learn/python":{"title":"#Python","data":{"":"LEARN\nWhat is Python\nPython is a programming language that lets you work quickly and integrate systems more effectively.\nPython is known for easy syntax and easy learning curve.\nREAD\nAll Python readings\nRead all Python related articles"}},"/learn/python/ai-model-recognize-signs":{"title":"Ai Model Recognize Signs","data":{"":"Oczywiście! Aby stworzyć model uczenia maszynowego do rozpoznawania i porównywania podpisów, będziesz potrzebował danych treningowych, na których model będzie się uczył. Idealnie byłoby, gdybyś miał zestaw podpisów różnych osób, które zostaną użyte do uczenia modelu. Oto ogólny przewodnik, jak można stworzyć taki model z użyciem TensorFlow:Zbieranie danych treningowych:Zebranie próbek podpisów różnych osób. Dla każdej osoby musisz mieć zestaw próbek ich podpisów.\nPrzygotowanie danych:Konwertowanie podpisów na format, który można użyć do uczenia modelu. Możesz użyć obrazów podpisów lub zamienić podpisy na dane numeryczne.\nPodział danych:Podziel dane na zestawy treningowe i testowe, aby ocenić wydajność modelu.\nTworzenie modelu TensorFlow:Możesz wykorzystać bibliotekę TensorFlow do zdefiniowania modelu głębokiego uczenia. Oto przykład prostego modelu w TensorFlow 2.x:\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n# Tworzenie modelu\nmodel = keras.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(height, width, 1)),\n    layers.MaxPooling2D((2, 2)),\n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(num_classes, activation='softmax')\n])\n# Kompilacja modelu\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nTen kod tworzy prosty model konwolucyjnej sieci neuronowej. Możesz dostosować architekturę modelu do swoich potrzeb.Trenowanie modelu:Ucz model na danych treningowych za pomocą metody model.fit.\nOcena modelu:Ocen model na danych testowych, aby sprawdzić jego wydajność.\nPorównywanie podpisów:Po wytrenowaniu modelu można użyć go do porównywania podpisów. Podaj dwa podpisy jako dane wejściowe i użyj modelu, aby ocenić podobieństwo między nimi.\nTo ogólny przewodnik. Dokładna implementacja zależy od twoich konkretnych danych i wymagań. Jeśli masz konkretne pytania lub potrzebujesz bardziej szczegółowej pomocy, daj mi znać, a chętnie pomogę."}},"/learn/python/resize-image":{"title":"Resize image with Python","data":{"":"200x200\n400x400\nKacper Walczak · 28-10-2023\nResize img with PIL library\nGet to know how to use PIL library\nfor Python img resize solution.","how-to-resize-image-with-python#How to resize image with Python?":"You can use PIL library to resize your images. PIL is a Python Imaging Library. It is free and open-source library. It supports many file formats and provides powerful image processing and graphics capabilities.Other libraries that you can use to resize images are:\nOpenCV\nScikit-image\nPython Wand\nPythonMagick\nPyvips","install-pil-library#Install PIL library":"pip install Pillow","resize-image#Resize image":"from PIL import Image\nclass ImageResizer:\n    @staticmethod\n    def resize(file_path: str, width=100, height=100) -> Image:\n        image = Image.open(file_path)\n        new_image = image.resize((width, height))\n        return new_image\nif __name__ == \"__main__\":\n    new_img = ImageResizer.resize(file_path=\"dalle_onion_img.png\", width=200, height=200)\n    new_img.save(f\"img_resized(x:{200},y:{200}).png\")\nThat's it! Now you can use this code to resize your images."}},"/learn/react":{"title":"#React","data":{"":"LEARN\nWhat is React\nReact is a JavaScript library for building user interfaces.\nIt is maintained by Facebook and a community of individual developers and companies.\nReact can be used as a base in the development of single-page or mobile applications.\nREAD\nAll React readings\nRead all React related articles"}},"/learn/typescript":{"title":"#Typescript","data":{"":"LEARN\nWhat is Typescript\nTypescript is a superset of Javascript. It adds types to Javascript and compiles to plain Javascript.\nTypescript is very useful when you build bigger applications. It's worthy to learn it.\nREAD\nAll Typescript readings\nRead all Typescript related articles"}},"/libraries/qtheme":{"title":"Qtheme","data":{"":"Qtheme Website\nQtheme GitHub repository\nQtheme NPM package\n~5kb.js, 0 dependencies, fast, fully typed and production-ready css-in-js library for managing themes in your app. Create multiple themes and switch between them with Qtheme.setTheme(theme)","requirements#Requirements":"None, works with any framework and plain JS/TS with HTML.","install#Install":"bash npm install @quak.lib/qtheme \nCheck out website to see Qtheme\nin action.\nTheme selector - top-right corner","what-is-qtheme#What is Qtheme?":"import { Qtheme, Theme, CSSProps } from \"@quak.lib/qtheme\";\nconst btn: CSSProps = {\n  \"text-align\": \"center\", // simple strings for any CSS you need\n  backgroundColor: \"var(--primary)\", // or use intelisense\n  color: \"var(--primary-content)\",\n  fontWeight: 900,\n};\nconst btnHover: CSSProps = {\n  borderStyle: \"inset\",\n  cursor: \"pointer\",\n};\n// Override atoms in each theme\n// Use Qtheme.setCommonAtoms(atoms) to set atoms for all themes\nconst lightTheme: Theme = {\n  name: \"light\",\n  atoms: [\n    // SIMPLE ATOMS\n    // generates --primary: dodgerblue\n    [\"primary\", \"dodgerblue\"],\n    // COMPOUND ATOMS\n    // generates CSS class .btn + .btn:hover\n    [\"btn\", btn],\n    [\"btn:hover\", btnHover],\n    // ATOMS WITH CSS CLASSES\n    // generates --bg-color: hsl(0, 0%, 100%)\n    // + .bg-color { background-color: var(--bg-color) }\n    [\"bg-color\", \"background-color:hsl(0, 0%, 100%)\"],\n    [\"text-color\", \"color:black\"],\n    [\"text-primary\", \"color:var(--primary)\"],\n  ],\n};\n// Init theme\nQtheme.setTheme(lightTheme);\n// Try to initialize theme from localStorage else lightTheme\nQtheme.init(lightTheme);\nOnce you initialized atoms you can use class=\"bg-color\" to set background color or class=\"text-primary\" to set text color, etc.\n<body class=\"bg-color text-color\">\n  <h1 class=\"text-primary\">Hello world!</h1>\n  <p>This is regular text color</p>\n  <btn class=\"btn\">Action</btn>\n</body>\nChange theme with Qtheme.setTheme(theme).\nimport { Qtheme } from \"@quak.lib/qtheme\";\n// btn, btnHover from previous example\nconst darkTheme: Theme = {\n  name: \"dark\",\n  atoms: [\n    [\"primary\", \"red\"],\n    [\"btn\", btn],\n    [\"btn:hover\", btnHover],\n    [\"bg-color\", \"background-color:hsl(0, 0%, 0%)\"],\n    [\"text-color\", \"color:white\"],\n    [\"text-primary\", \"color:var(--primary)\"],\n  ],\n};\nQtheme.setTheme(darkTheme);","getting-started#Getting started":"Qtheme lets you:\nCreate infinite number of themes\nSwitch between them easily\nSet common theme atoms for all themes\nInitialize already chosen theme on app start\nGenerate CSS classes for you, so you don't have to write it by yourself\nContinue getting started at Qtheme Docs - Getting started","documentation#Documentation":"Documentation with getting started, examples and API reference.","examples-repository#Examples repository":"Qtheme has separate GitHub repo with examples for each framework/compiler/library/vanilla JS/TS.\nWill work with vanilla JS if supports import/export.","api#API":"You will find all information about Qtheme theming API in Qtheme Docs - API","license#License":"MIT LICENSEMade & maintained with ❤️ by QUAK"}},"/portfolio":{"title":"Portfolio /","data":{"":"Norway, I shot it, colors are maxed.\nProjects, apps, games, websites; made by QUAK.\nAll of them were successfully ✅ delivered and deployed.","projects#Projects":"TechApp\nRTV/AGD Service ticket management and easy maps\nActive\nOnline since 2022\nShopApp\nPhotographer shop and portfolio platform\nOff\nActive 2021 - 2022\nCreativoApp\nManaging orders and invoices\nOff\nActive 2021 - 2022\n?\nPsyApp\nPsychologist interactive psycho-test\nOff\nActive 2021 - 2022\nWielkopolski Rajd Historyczny\nAutomobilklub Wielkopolski Official website for oldtimer's event\nOff\nActive 2019 - 2021","quak-platform#QUAK Platform":"QUAK is migrating main functionalities to the new platform, so apps and games in fullscreen on phones are not available yet ;( (some time is needed, probably few months more)\nQchat\nChat app, even had it's own domain qchat.pl\nStatus\nUnder merging into one app\nQwallet\nManage your money assets\nStatus\nUnder merging into one app\nQgames\nFree games search\nStatus\nUnder merging into one app\nQcrypto\nCrypto charts, data from Coingecko\nStatus\nUnder merging into one app","games#Games":"All games are available for 🖥️ Desktop and 📱 Mobile devices.\nQUAKKY\n2D, tapper\nADVENTURER\n2D, slash, shoot, dash\nSNAKE\n2D, nostalgic\nASTEROIDS\n2D, shoot, shoot, shoot\nMade with ❤️ and technologies (+ many more)"}},"/portfolio/adventurer":{"title":"Adventurer","data":{"":"QUAK is working on it."}},"/portfolio/creativo-app":{"title":"CreativoApp","data":{"":"QUAK is working on it."}},"/portfolio/psy-app":{"title":"PsyApp","data":{"":"QUAK is working on it."}},"/portfolio/qchat":{"title":"Qchat","data":{"":"QUAK is working on it."}},"/portfolio/qcrypto":{"title":"Qcrypto","data":{"":"QUAK is working on it."}},"/portfolio/qgames":{"title":"Qgames","data":{"":"QUAK is working on it."}},"/portfolio/quakky":{"title":"Quakky","data":{"":"QUAK is working on it."}},"/portfolio/qwallet":{"title":"Qwallet","data":{"":"QUAK is working on it."}},"/portfolio/shop-app":{"title":"ShopApp","data":{"":"QUAK is working on it."}},"/portfolio/retro-games":{"title":"Snake","data":{"":"QUAK is working on it.\nAsteroids\nSnake"}},"/portfolio/tech-app":{"title":"TechApp","data":{"description#Description":"TechApp is an app for managing tickets and generating documents after a repair (customers approve that job was done by sign in app). Mainly it is used by technicians in the field. TechApp allows to open navigation straight to the customer's address.","desktop-and-mobile#Desktop and mobile":"Data is inserted with the same app but in office (installable desktop version as well).It is a PWA application (can be installed on any Desktop and any iOS/Android).","technologies#Technologies":"Frontend is built with Angular. The backend is built with Node and Nest.js framework.","languages#Languages":"Language: only Polish.","screenshots-and-videos#Screenshots and videos":"Mobile usage\nDesktop usage\nActive\nOnline since 2022","whats-next#What's next?":"Contact with me to get access to the demo version - if your company is interested in using something similar to it."}},"/portfolio/wrh":{"title":"Wielkopolski Rajd Historyczny","data":{"":"QUAK is working on it."}},"/privacy":{"title":"Privacy Policy","data":{"what-information-do-we-collect#What information do we collect?":"We collect information from you when you enter our site, only to make it load faster next time. We do not collect any personal information.You may, however, visit our site anonymously.","what-do-we-use-your-information-for#What do we use your information for?":"Any of the information we collect from you may be used in one of the following ways:\nTo personalize your experience\n(your information helps us to better respond to your individual needs)\nTo improve our website\n(we continually strive to improve our website offerings based on the information and feedback we receive from you)","how-do-we-protect-your-information#How do we protect your information?":"We implement a variety of security measures to maintain the safety of your personal information when you place an order or enter, submit, or access your personal information.We offer the use of a secure server.","do-we-use-cookies#Do we use cookies?":"Yes (Cookies are small files that a site or its service provider transfers to your computers hard drive through your Web browser (if you allow) that enables the sites or service providers systems to recognize your browser and capture and remember certain informationWe use cookies only to speed up the loading of our website and your settings like theme.","do-we-disclose-any-information-to-outside-parties#Do we disclose any information to outside parties?":"We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety.","third-party-links#Third party links":"Occasionally, at our discretion, we may include or offer third party products or services on our website. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.","online-privacy-policy-only#Online Privacy Policy Only":"This online privacy policy applies only to information collected through our website and not to information collected offline.","your-consent#Your Consent":"By using our site, you consent to our privacy policy.","changes-to-our-privacy-policy#Changes to our Privacy Policy":"If we decide to change our privacy policy, we will post those changes on this page, and/or update the Privacy Policy modification date below.This policy was last modified on 05-11-2023","contacting-us#Contacting Us":"If there are any questions regarding this privacy policy you may contact us using the information below.QUAK Kacper WalczakNIP: 7773209929ul. Wilczak 20B/12461-623, Poznańk.walczak@quak.com.plOr go to our contact page"}},"/useful":{"title":"Useful","data":{}},"/useful/valentines":{"title":"Valentines Card","data":{"description#Description":"This is a simple valentines card that I made for my girlfriend. It's a simple web page that you can show to your valentine.","how-to-use#How to use":"Enter website quak.com.pl/valentines\nBut it will display\nHappy Valentines Day\n<Heart animation>\nKali","how-to-change-name#How to change name":"Enter website:\nhttps://quak.com.pl/valentines/?name=YOUR_NAME\nwith spaces:\nhttps://quak.com.pl/valentines/?name=YOUR%20NAME\nEffect:That's all. Enjoy!"}},"/learn/bun":{"title":"#Bun","data":{"":"LEARN\nWhat is Bun\nBun is a fast JavaScript runtime.\nDevelop, test, run, and bundle JavaScript & TypeScript projects—all with Bun.\nBun is an all-in-one JavaScript runtime & toolkit designed for speed, complete\nwith a bundler, test runner, and Node.js-compatible package manager.\nREAD\nAll Bun readings\nRead all Bun related articles"}},"/learn/bun/build-http-server":{"title":"Build HTTP with Bun","data":{"":"Very fast HTTP server library based on Bun. Feel free to use it in your projects. Just copy the lib/src/http.Bun-http GutHub repo","final-usage#Final usage":"This is how you can use it in your project.\nserve method should be last method in chain.\nimport { http, Res } from \"./lib/src/http\";\nconst str = (val: any) => JSON.stringify(val);\nhttp.get(\"/\", (req) => {\n  return new Res(`Hello from home`);\n});\nhttp.get(\"/product/:productId\", (req) => {\n  return new Res(`Product (id: ${req.params.productId})`);\n});\nhttp.post(\"/blog/create\", (req) => {\n  return new Res(`\n    params: ${str(req.params)},\n    query: ${str(req.query)},\n    body: ${str(req.body)}\n  `);\n});\nconst server = http.serve({ port: 3000 });\nconsole.log(`Listening on port ${server.port}...`);\n/* Example output\nbun main.ts\n    [0.90ms] \".env\"\n    Listening on port 3000...\n    8:27:48 PM: 200 GET /\n    8:27:52 PM: 405 GET /blog/123\n    8:27:56 PM: 200 POST /blog/123\n    8:27:58 PM: 200 GET /__endpoints\n*/","how-to-build-it#How to build it":"Create library folder mkdir lib\nCreate src folder mkdir lib/src\nCreate http.ts file touch lib/src/http.ts\nCreate index.ts file touch lib/index.ts\nCreate tsconfig.json file touch lib/tsconfig.json\nCreate package.json file touch lib/package.json\nCreate README.md file touch lib/README.md","final-folder-structure#Final folder structure":"","build-http-object#Build http object":"Http object will be our main object to build http server. It will have methods like get, post, put, etc. and serve method to start server.\nrouter shouldn't be public. Consider change to class with private router.\n// lib/src/http.ts\nexport type ServeOptions = { port?: number };\nconst defaultServeOptions: ServeOptions = {\n  port: 3000,\n};\nexport const http = {\n  router: new Router(),\n  get(path: string, handler: (req: Req) => Res) {\n    this.router.endpoints.push({ path, handler, method: \"GET\" });\n  },\n  post(path: string, handler: (req: Req) => Res) {\n    this.router.endpoints.push({ path, handler, method: \"POST\" });\n  },\n  put(path: string, handler: (req: Req) => Res) {\n    this.router.endpoints.push({ path, handler, method: \"PUT\" });\n  },\n  delete(path: string, handler: (req: Req) => Res) {\n    this.router.endpoints.push({ path, handler, method: \"DELETE\" });\n  },\n  patch(path: string, handler: (req: Req) => Res) {\n    this.router.endpoints.push({ path, handler, method: \"PATCH\" });\n  },\n  serve(opts = defaultServeOptions) {\n    return Bun.serve({\n      port: opts.port,\n      fetch(req) {\n        return http.router.route(req);\n      },\n      error(err) {\n        return new Res(`<p>${err}\\n${err.stack}</pre>`, {\n          headers: {\n            \"Content-Type\": \"text/html\",\n          },\n        });\n      },\n    });\n  },\n};","build-router-class#Build router class":"Router should be able to handle request and route to proper endpoint. For example:\nconst router = new Router();\nrouter.endpoints.push({ path: \"/blog/:id\", handler: (req) => {...} });\n// request GET /blog/123\nrouter.route(request); // { path: \"/blog/:id\", handler: (req) => {...} }\nexport class Router {\n  endpoints: Endpoints = new Endpoints();\n  constructor() {\n    if (Bun.env.PRODUCTION == \"false\") {\n      // [DEV ONLY] Adds showcase page with all endpoints\n      this.endpoints.push(AdminEndpoints.showcase(this.endpoints));\n    }\n  }\n  // Request init from Bun\n  async route(req: Request) {\n    const url = new URL(req.url);\n    const path = url.pathname;\n    const query = url.searchParams;\n    const pathArr = path.split(\"/\");\n    const log = (status: number) =>\n      reqLog({ status, method: req.method, path });\n    const endpoint = this.endpoints.getByPath(path);\n    if (!endpoint) {\n      log(404);\n      return new Res(\"Not found\", { status: 404 });\n    }\n    if (req.method !== endpoint.method) {\n      log(405);\n      return new Res(\"Method not allowed\", { status: 405 });\n    }\n    const request = new Req(req);\n    request.params = Params.fromPathArray(endpoint.pathArr ?? [], pathArr);\n    request.query = Object.fromEntries(query.entries());\n    if (req.method !== \"GET\" && req.method !== \"HEAD\") {\n      request.body = await req.json();\n    }\n    const response = endpoint.handler(request);\n    log(response.status);\n    return response;\n  }\n}","create-endpoints#Create Endpoints":"Endpoints should be able to find by path. For example:\nconst endpoints = new Endpoints();\nendpoints.push({ path: \"/blog/:id\", handler: (req) => {...} });\nendpoints.getByPath(\"/blog/123\"); // { path: \"/blog/:id\", handler: (req) => {...} }\nexport type Endpoint = {\n  path: string; // /blog/:id\n  handler: (req: Req) => Res;\n  pathArr?: (string | any)[]; // ['blog', ':id']\n  method?: string;\n};\nexport class Endpoints extends Array<Endpoint> {\n  override push(...endpoints: Endpoint[]) {\n    endpoints.forEach((e) => (e.pathArr = e.path.split(\"/\")));\n    return super.push(...endpoints);\n  }\n  override unshift(...endpoints: Endpoint[]) {\n    endpoints.forEach((e) => (e.pathArr = e.path.split(\"/\")));\n    return super.unshift(...endpoints);\n  }\n  getByPath(path: string) {\n    const endpoint = this.find((e) => {\n      const pathArr = path.split(\"/\");\n      if (e.path === path) return true;\n      if (!e.pathArr) return false;\n      if (e.pathArr.length !== pathArr.length) return false;\n      return e.pathArr.every((p, i) => {\n        if (p.startsWith(\":\")) {\n          return true;\n        }\n        return p === pathArr[i];\n      });\n    });\n    return endpoint;\n  }\n}","flavor-with-req-res-and-params#Flavor with Req, Res and Params":"export class Req extends Request {\n  private _body: any = {};\n  public params: { [key: string]: string } = {};\n  public query: { [key: string]: string } = {};\n  get body(): any {\n    return this._body;\n  }\n  set body(val: any) {\n    this._body = val;\n  }\n}\nexport class Res extends Response {}\nconst Params = {\n  fromPathArray(endpointPath: string[], requestPath: string[]) {\n    const params: { [key: string]: string } = {};\n    endpointPath.forEach((p, i) => {\n      if (!p.startsWith(\":\")) return;\n      params[p.slice(1)] = requestPath[i];\n    });\n    return params;\n  },\n};","create-showcase-page#Create showcase page":"/**\n * [SHOULD BE AVAILABLE DEV ONLY] Adds showcase page with all endpoints\n */\nclass AdminEndpoints {\n  static showcase(endpoints: Endpoint[]): Endpoint {\n    return {\n      path: \"/__endpoints\",\n      method: \"GET\",\n      handler: (req) =>\n        new Response(\n          \"<h1>Endpoints:</h1>\\n<ol>\\n\" +\n            endpoints\n              .filter((e) => !e.path.startsWith(\"/__\"))\n              .map((e) => \"  <li>\" + e.path + \"</li>\")\n              .sort()\n              .join(\"\\n\") +\n            \"\\n</ol>\",\n          {\n            headers: {\n              \"Content-Type\": \"text/html\",\n            },\n          }\n        ),\n    };\n  }\n}","endpoints-showcase#Endpoints showcase":"This endpoints list was generated for Final usage section.When user writes http.get, http.post, etc. then should be able to visit localhost:3000/__endpoints to see all endpoints.This page will look like this:That's all. Now you can use your http library.Consider to add few more features like:\nAdd http.head method\nAdd middlewares\netc..."}},"/learn/node":{"title":"#Node","data":{"":"LEARN\nWhat is Node\nNode is a JavaScript runtime built on Chrome's V8 JavaScript engine.\nNode is known for its asynchronous, non-blocking, single-threaded approach to programming.\nNode is used for traditional web sites and back-end API services.\nREAD\nAll Node readings\nRead all Node related articles"}},"/learn/typescript/dependency-injection":{"title":"Dependency-Injection-TS","data":{"":"Dependency Injection Pattern in TypeScript.\nNote!\nUnfortunately it does not work with Bun, but it works with NodeJS.","usage#Usage":"Pattern usage:\n// Simple class for dependency injection testing\nclass Test {\n  constructor() {\n    console.log(\"Test constructor - created\");\n  }\n  doSomething(): void {\n    console.log(\"Test did something\");\n  }\n}\n// Entry point class\n@Injectable()\nclass App implements OnDestroy {\n  constructor(public test: Test) {}\n  onDestroy(): void {\n    console.log(\"App destroyed\");\n  }\n}\nconst [entryClass, destroy] = bootstrap<App>(App);\n// Initialize the entry point class instance\n// Output:\n//   Injector resolving class Test\n//   Test constructor - created\n//   Injector created class Test\n//   Injector resolving class App\n//   Injector created class App\nentryClass.test.doSomething();\n// Use the entry point class instance\n// Output:\n//   Test did something\ndestroy();\n// Destroy the entry point class instance\n// Output:\n//   App destroyed","pattern#Pattern":"","import-reflect-metadata#Import reflect-metadata":"Import the reflect-metadata package to be able to use Reflect's metadata.\nimport \"reflect-metadata\";","type-interface#Type interface":"Create type for classes that will be resolved in Injector.\nexport interface Type<T> {\n  new (...args: any[]): T;\n}","injectable-decorator#Injectable decorator":"Decorator function to annotate classes which can inject another ones in constructors.\n@Injectable()\nclass App { /* ... */ }\nexport const Injectable = (): ((target: Type<any>) => void) => {\n  return (target: Type<any>) => {};\n};","ondestroy-interface#OnDestroy interface":"Lifecycle hook that is used for releasing a resource.\nIt will be called automatically by DI container.\nexport interface OnDestroy {\n  onDestroy(): void;\n}","injector-class#Injector class":"Injector class that is used for resolving classes.\nclass App { /* ... */ }\nconst injector = new Injector();\n// bootstrap all dependencies\nconst entryClass = injector.resolve<App>(App);\n/**\n * Every entry point class instance starts its own dependency container.\n * Injector ensures that all decorated classes in the container are singletons.\n */\nexport class Injector extends Map {\n  public resolve<T>(target: Type<any>): T {\n    const tokens = Reflect.getMetadata(\"design:paramtypes\", target) || [];\n    const injections = tokens.map((token: Type<any>) => {\n      return this.resolve<any>(token);\n    });\n    console.log(`Injector is resolving class ${target.name}`);\n    const classInstance = this.get(target);\n    if (classInstance) {\n      return classInstance;\n    }\n    const newClassInstance = new target(...injections);\n    this.set(target, newClassInstance);\n    console.log(\n      `Injector has created class ${newClassInstance.constructor.name}`\n    );\n    return newClassInstance;\n  }\n  public onDestroy(): void {\n    for (const value of this.values()) {\n      if (typeof value[\"onDestroy\"] === \"function\") {\n        value[\"onDestroy\"]();\n      }\n    }\n    this.clear();\n  }\n}","bootstrap-function#Bootstrap function":"Function that is used for bootstrapping the entry point class instance.\nconst [entryClass, destroy] = bootstrap<App>(App);\n/**\n * Bootstraps the entry point class instance of type T.\n *\n * @returns entry point class instance and the \"destroy\" function which destroy the DI container\n */\nexport const bootstrap = <T>(target: Type<any>): [T, () => void] => {\n  // there is exactly one Injector pro entry point class instance\n  const injector = new Injector();\n  // bootstrap all dependencies\n  const entryClass = injector.resolve<T>(target);\n  return [entryClass, () => injector.onDestroy()];\n};\nThat's it! Now you can use this pattern in your applications/libraries."}},"/libraries/qstore":{"title":"Qstore","data":{"":"JS library for state management based on RxJS. It's a simple and lightweight alternative to Redux, MobX, Vuex, etc. Use it if it fits your needs.","install#Install":"I closed NPM package - it's so small that you should just copy-paste it to your project.\n# Closed NPM package","for-rxjs-version#For RxJS Version":"import {BehaviorSubject, Subject, Observable} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n// Store\nexport abstract class Store<T> {\n    private state$: BehaviorSubject<T>;\n    protected constructor(initialState: T) {\n        this.state$ = new BehaviorSubject(initialState);\n    }\n    select<K>(mapFn: (state: T) => K): Observable<K> {\n        return this.state$.asObservable().pipe(\n            map((state: T) => mapFn(state)),\n            distinctUntilChanged()\n        );\n    }\n    set(state: Partial<T>): void {\n        this.state$.next({...this.values, ...state});\n    }\n    get values(): T {\n        return this.state$.getValue();\n    }\n}\n// Actions\nexport interface StoreEvent {\n    execute: () => void;\n    listen: () => Observable<void>;\n}\nexport interface StoreEventWithPayload<P> {\n    execute: (payload: P) => void;\n    listen: () => Observable<P>;\n}\nexport const Action = (): StoreEvent => {\n    const action$ = new Subject<void>();\n    return {\n        listen: (): Observable<void> => action$,\n        execute: () => action$.next()\n    }\n};\nexport const ActionWith = <Payload>(): StoreEventWithPayload<Payload> => {\n    const payload$ = new Subject<Payload>();\n    return {\n        listen: (): Observable<Payload> => payload$,\n        execute: (payload: Payload) => payload$.next(payload)\n    }\n};","license#License":"To the code in this page below license applies.\nMIT License\nCopyright (c) 2023 QUAK Kacper Walczak\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nMade & maintained with ❤️ by QUAK"}}}